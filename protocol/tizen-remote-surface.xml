<?xml version="1.0" encoding="UTF-8"?>
<protocol name="tizen_remote_surface">
  <interface name="tizen_remote_surface_manager" version="4">
     <description summary="manager of tizen_remote_surface">
        A manager of tizen_remote_surface. This object is in charge of
        creating tizen_remote_surface_provider and tizen_remote_surface and
        provide additional operations for those objects.
     </description>
     <request name="create_provider">
        <description summary="create new remote surface provider">
           Ask manager creation of a new remote surface provider.
           A wl_surface is required for making remote surface provider.
        </description>
        <arg name="id" type="new_id" interface="tizen_remote_surface_provider" summary="new remote surface provider id"/>
        <arg name="surface" type="object" interface="wl_surface" summary="wayland surface to be handled as provider"/>
     </request>

     <request name="create_surface">
        <description summary="create new remote surface">
           Ask manager creation of a new remote surface.
           resource_id is required to identify this remote surface is what provider of
           and wl_tbm object is used for remote buffer of this remote surface.
        </description>
        <arg name="id" type="new_id" interface="tizen_remote_surface" summary="new remote surface id" />
        <arg name="resource_id" type="uint" summary="provider's resource id"/>
       <arg name="tbm" type="object" interface="wl_tbm" summary="wl_tbm object used to get tbm_surface"/>
     </request>

     <request name="bind_surface">
        <description summary="bind a remote surface and a wl_surface each other">
           Combining a remote surface object into a wl_surface object.
           If a remote surface and a wayland surface are bound each other,
           wayland surface can be automatically drawed by buffer updating of
           remote surface provider without notice to an owner of remote surface.
        </description>
        <arg name="surface" type="object" interface="wl_surface" allow-null="true" summary="wayland surface to be set remote surface"/>
        <arg name="remote_surface" type="object" interface="tizen_remote_surface" summary="remote surface for target wayland surface"/>
     </request>
  </interface>

  <interface name="tizen_remote_surface_provider" version="4">
     <description summary="a provider of remote buffer source">
        A provider client. Surfaces of providers are offscreen.
        An attached buffer of the provider is used for creating remote buffer
        and the remote buffer is delivered to remote surfaces.
     </description>
     <request name="destroy" type="destructor" />

     <request name="offscreen_set">
        <description summary="request offscreen rendering">
           Requests for setting or unsetting offscreen.
           The default is offscreen if provider client never requests this.
        </description>
        <arg name="set" type="uint" summary="zero value means unset and non-zero value means set of offscreen" />
     </request>

     <!-- for id -->
     <event name="resource_id">
        <description summary="announce resource id of provider">
           Announce resource id of this provider.
        </description>
        <arg name="resource_id" type="uint" summary="this provider's resource_id"/>
     </event>

     <!-- for visibility -->
     <event name="visibility">
        <description summary="notify of visibility change">
           Notify of visibility chages.
           This provider's visibility is determined by its remote surfaces.
        </description>
        <arg name="visibility" type="uint" enum="visibility_type" summary="visibility type"/>
     </event>

     <enum name="visibility_type">
        <entry name="visible" value="0" />
        <entry name="invisible" value="1" />
     </enum>

     <!-- version 4 additions -->

     <request name="set_input_event_filter" since="4">
        <description summary="set event filter to be allowed">
           Some providers can accept restricted events only. To notify of what
           event is allowed or not, provider can set event filter using this
           request.
        </description>
        <arg name="event_filter" type="uint" summary="event filter value. To calculate your event filter value, refer enum input_event_filter of tizen_remote_surface interface"/>
     </request>>
  </interface>

  <interface name="tizen_remote_surface" version="4">
     <description summary="a consumer of buffers from a provider">
        A consumer client of provider client's buffer.
        The consumer can receive notice of buffer updating of
        its provider and use the received buffer for drawing its own buffer.
        The consumer also can request for transfering input events into its
        provider.
     </description>
     <request name="destroy" type="destructor" />

     <!-- for buffer update -->
     <request name="redirect">
        <description summary="request redirect of provider's buffer">
           Request for redirect of provider's buffer. A consumer is able to receive
           buffer_update after this request.
        </description>
     </request>
     <request name="unredirect">
        <description summary="request for stop redirect of provider's buffer"/>
     </request>

     <event name="update_buffer">
        <description summary="deliver updated buffer of provider">
           When a provider client of a remote surface sent wl_surface.commit,
           server deliver a remote buffer is created based on provider's buffer.
           This event is deprecated. Please use changed_buffer event instead of it.
        </description>
        <arg name="buffer" type="object" interface="wl_buffer" summary="wayland buffer based on provider updated buffer"/>
        <arg name="time" type="uint" summary="timestampa" />
     </event>

     <!-- for event transference -->
     <request name="transfer_mouse_event">
        <description summary="notify of mouse up/down/move event on remote surface" />
        <arg name="event_type" type="uint" enum="event_type" summary="event type" />
        <arg name="device" type="int" summary="device type" />
        <arg name="button" type="int" summary="button id" />
        <arg name="x" type="int" summary="x coordinate" />
        <arg name="y" type="int" summary="y coordinate" />
        <arg name="radius_x" type="fixed" summary="minor axis of touch point"  />
        <arg name="radius_y" type="fixed" summary="major axis of touch point" />
        <arg name="pressure" type="fixed" summary="pressure of touch point" />
        <arg name="angle" type="fixed" summary="angle of touch point" />
        <arg name="clas" type="uint" summary="class of event generator(device)" />
        <arg name="subclas" type="uint" summary="subclass of event generator(device)" />
        <arg name="identifier" type="string" summary="description of event generator(device)" />
        <arg name="time" type="uint" summary="timestamp" />
     </request>

     <request name="transfer_mouse_wheel">
        <description summary="notify of mouse wheel event on remote surface" />
        <arg name="direction" type="uint" summary="wheel direction" />
        <arg name="z" type="int"  summary="z coordinate" />
        <arg name="clas" type="uint" summary="class of event generator(device)" />
        <arg name="subclas" type="uint" summary="subclass of event generator(device)" />
        <arg name="identifier" type="string" summary="description of event generator(device)" />
        <arg name="time" type="uint" summary="timestamp" />
     </request>

     <request name="transfer_touch_event">
        <description summary="notify of touch up/down/move event on remote surface" />
        <arg name="event_type" type="uint" enum="event_type" summary="event type" />
        <arg name="device" type="int" summary="device type" />
        <arg name="button" type="int" summary="button id" />
        <arg name="x" type="int" summary="x coordinate" />
        <arg name="y" type="int" summary="y coordinate" />
        <arg name="radius_x" type="fixed" summary="minor axis of touch point"  />
        <arg name="radius_y" type="fixed" summary="major axis of touch point" />
        <arg name="pressure" type="fixed" summary="pressure of touch point" />
        <arg name="angle" type="fixed" summary="angle of touch point" />
        <arg name="clas" type="uint" summary="class of event generator(device)" />
        <arg name="subclas" type="uint" summary="subclass of event generator(device)" />
        <arg name="identifier" type="string" summary="description of event generator(device)" />
        <arg name="time" type="uint" summary="timestamp" />
     </request>

     <request name="transfer_touch_cancel">
        <description summary="notify of touch cancel"/>
     </request>

     <request name="transfer_key_event">
        <description summary="notify of key down/up event"/>
        <arg name="event_type" type="uint" enum="event_type" summary="event type" />
        <arg name="keycode" type="int" summary="keycode" />
        <arg name="clas" type="uint" summary="class of event generator(device)" />
        <arg name="subclas" type="uint" summary="subclass of event generator(device)" />
        <arg name="identifier" type="string" summary="description of event generator(device)" />
        <arg name="time" type="uint" summary="timestamp" />
     </request>

     <enum name="event_type">
        <entry name="none" value="0" />
        <entry name="mouse_down" value="1" />
        <entry name="mouse_up" value="2" />
        <entry name="mouse_move" value="3" />
        <entry name="touch_down" value="4" />
        <entry name="touch_up" value="5" />
        <entry name="touch_move" value="6" />
        <entry name="key_down" value="7" />
        <entry name="key_up" value="8" />
        <entry name="mouse_in" value="9" />
        <entry name="mouse_out" value="10" />
     </enum>

     <!-- for visibility transference -->
     <request name="transfer_visibility">
        <description summary="notify of visibility change of remote surface" />
        <arg name="visibility" type="uint" enum="visibility_type" summary="changed visibility type" />
     </request>

     <enum name="visibility_type">
        <entry name="visible" value="0" />
        <entry name="invisible" value="1" />
     </enum>

     <!-- for notify of provider's ejection -->
     <event name="missing">
        <description summary="notify of leave of provider" />
     </event>

     <request name="set_owner">
        <description summary="set owner surface of remote sruface">
           Set owner wl_surface object of this remote surface.
        </description>
        <arg name="owner" type="object" interface="wl_surface" allow-null="true" summary="wayland surface to be set to an owner" />
     </request>

     <request name="create_region">
        <description summary="create new region">
           Ask tizen_remote_surface for creation of new remote surface region object.
           tizen_remote_surface_region object can be used for representing
           region of tizen_remote_surface.
        </description>
        <arg name="id" type="new_id" interface="tizen_remote_surface_region" />
     </request>

     <!-- Version 2 additions -->

     <request name="release" since="2">
        <description summary="request release of wayland buffer">
           Notify of end of using the wayland buffer.
           tizen_remote_surface client SHOULD request this after all work using
           wayland buffer is done so that provider of the wl_buffer can re-use the buffer.
        </description>
        <arg name="buffer" type="object" interface="wl_buffer" summary="wayland buffer to be released"/>
     </request>

     <!-- Version 3 additions -->

     <enum name="buffer_type" since="3">
        <description summary="type of remote surface buffer" />
        <entry name="tbm" value="0" summary="tbm type"/>
        <entry name="image_file" value="1" summary="image file type"/>
     </enum>

     <event name="changed_buffer" since="3">
        <description summary="deliver a changed buffer of the provider client">
           When a provider client of a remote surface sent wl_surface.commit,
           the compositor delivers a remote buffer is created based on provider's buffer.
           And the buffer of provider client can be changed to the static image file by
           the compositor whenever its window is iconify. Then consumer has to use
           fd instead of buffer.
        </description>
        <arg name="type" type="uint" enum="buffer_type" summary="buffer type" />
        <arg name="tbm" type="object" interface="wl_buffer" allow-null="true" summary="wayland buffer based on provider updated buffer"/>
        <arg name="img_file_fd" type="fd" summary="static image file descriptor" />
        <arg name="img_file_size" type="uint" summary="size of static image file" />
        <arg name="time" type="uint" summary="timestamp" />
        <arg name="options" type="array" allow-null="true" summary="array of options"/>
     </event>

     <!-- Version 4 additions -->

     <event name="input_event_filter" since="4">
        <description summary="delivered a changed event filter of provider client">
           When a provider client of this remote surface sent
           remote_surface_provider@set_input_event_filter, a compositor delivers
           the event filter values to this remote surface client.
        </description>
        <arg name="event_filter" type="uint" summary="event filter value"/>
     </event>

     <enum name="input_event_filter">
        <description summary="vaules for event filter."/>
        <entry name="mouse_none" value="0x00000001"/>
        <entry name="mouse_up_down" value="0x00000002"/>
        <entry name="mouse_move_x" value="0x00000003"/>
        <entry name="mouse_move_y" value="0x00000004"/>
        <entry name="mouse_move_x_y" value="0x00000005"/>
        <entry name="mouse_up_down_move_x" value="0x00000006"/>
        <entry name="mouse_up_down_move_y" value="0x00000007"/>
        <entry name="mouse_up_down_move_x_y" value="0x00000008"/>
        <entry name="mouse_all" value="0x0000000e" />
        <entry name="mouse_flag" value="0x0000000f"/>
        <entry name="mouse_wheel_none" value="0x00000010"/>
        <entry name="mouse_wheel_all" value="0x000000e0"/>
        <entry name="mouse_wheel_flag" value="0x000000f0"/>
        <entry name="touch_none" value="0x00000100"/>
        <entry name="touch_up_down" value="0x00000200"/>
        <entry name="touch_move_x" value="0x00000300"/>
        <entry name="touch_move_y" value="0x00000400"/>
        <entry name="touch_move_x_y" value="0x00000500"/>
        <entry name="touch_up_down_move_x" value="0x00000600"/>
        <entry name="touch_up_down_move_y" value="0x00000700"/>
        <entry name="touch_up_down_move_x_y" value="0x00000800"/>
        <entry name="touch_all" value="0x00000e00"/>
        <entry name="touch_flag" value="0x00000f00"/>
        <entry name="touch_cancel_none" value="0x00001000"/>
        <entry name="touch_cancel_all" value="0x0000e000"/>
        <entry name="touch_cancel_flag" value="0x0000f000"/>
        <entry name="key_none" value="0x00010000"/>
        <entry name="key_all" value="0x000e0000"/>
        <entry name="key_flag" value="0x000f0000"/>
     </enum>

     <request name="set_remote_render" since="4">
        <description summary="request offscreen rendering of its provider client">
           Even if a provider is iconifed already and server sent
           its static image using tizen_remote_surface@changed_buffer, some
           privileged clients can request for offscreen rendering of the provider
           client using this request.
        </description>
        <arg name="set" type="uint" summary="do offscreen render of its provider if true" />
     </request>

  </interface>

  <interface name="tizen_remote_surface_region" version="1">
     <description summary="a region object">
        A region object having geometry information and etc.
     </description>
     <request name="destroy" type="destructor" />
     <request name="set_geometry">
        <description summary="set geometry of this region">
           Set geometry information of this region object.
        </description>
        <arg name="x" type="int" summary="x coordinate" />
        <arg name="y" type="int" summary="y coordinate" />
        <arg name="w" type="int" summary="width" />
        <arg name="h" type="int" summary="height" />
     </request>
  </interface>
</protocol>
